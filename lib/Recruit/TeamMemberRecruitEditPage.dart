import 'dart:convert';
import 'dart:ui';

import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';


import 'package:get/get.dart';
import 'package:sheeps_app/Recruit/SpecificUserRecruitPage.dart';

import 'package:sheeps_app/config/AppConfig.dart';
import 'package:sheeps_app/config/GlobalWidget.dart';
import 'package:sheeps_app/config/LoadingUI.dart';
import 'package:sheeps_app/config/SheepsTextStyle.dart';
import 'package:sheeps_app/config/constants.dart';
import 'package:sheeps_app/network/ApiProvider.dart';
import 'package:sheeps_app/profileModify/SelectField.dart';
import 'package:sheeps_app/TeamProfileManagement/model/Team.dart';
import 'Models/TeamMemberRecruit.dart';
import 'Controller/TeamMemberRecruitEditController.dart';
import 'RecruitDetailPage.dart';

class TeamMemberRecruitEditPage extends StatefulWidget {
  final Team team;
  final TeamMemberRecruit teamMemberRecruit;
  final bool isMyPageRecruit;

  const TeamMemberRecruitEditPage({Key key, @required this.team, this.teamMemberRecruit, this.isMyPageRecruit = false}) : super(key: key);

  @override
  _TeamMemberRecruitEditPageState createState() => _TeamMemberRecruitEditPageState();
}

class _TeamMemberRecruitEditPageState extends State<TeamMemberRecruitEditPage> {
  TeamMemberRecruitEditController controller = Get.put(TeamMemberRecruitEditController());

  PageController pageController = PageController();
  TextEditingController titleController = TextEditingController();
  TextEditingController infoController = TextEditingController();
  TextEditingController roleContentsController = TextEditingController();
  TextEditingController detailEligibilityController = TextEditingController();
  TextEditingController detailPreferenceInfoContentsController = TextEditingController();
  TextEditingController needWorkConditionController = TextEditingController();

  bool isReady = true;
  bool isEdit = false;

  bool isCanRecruit = true;

  @override
  void initState() {
    super.initState();
    if (widget.teamMemberRecruit != null) {
      isEdit = true;
      controller.editLoading(widget.teamMemberRecruit);
      titleController.text = controller.title.value;
      infoController.text = controller.recruitInfo.value;
      roleContentsController.text = controller.roleContents.value;
      detailEligibilityController.text = controller.detailEligibility.value;
      detailPreferenceInfoContentsController.text = controller.detailPreferenceInfoContents.value;
      needWorkConditionController.text = controller.detailWorkCondition.value;
    }

    checkCanRecruit();
  }

  @override
  void dispose() {
    pageController.dispose();
    titleController.dispose();
    infoController.dispose();
    roleContentsController.dispose();
    detailEligibilityController.dispose();
    detailPreferenceInfoContentsController.dispose();
    needWorkConditionController.dispose();
    super.dispose();
  }

  void backFunc() {
    switch (controller.barIndex.value) {
      case 0:
        {
          showEditCancelDialog(okButtonColor: sheepsColorBlue);
          break;
        }
      case 1:
        {
          controller.barIndex.value = 0;
          pageController.previousPage(duration: Duration(milliseconds: 500), curve: Curves.fastOutSlowIn);
          break;
        }
      case 2:
        {
          controller.barIndex.value = 1;
          pageController.previousPage(duration: Duration(milliseconds: 500), curve: Curves.fastOutSlowIn);
          break;
        }
    }
  }

  void checkCanRecruit() async {
    int countRecruit = 0;

    List<TeamMemberRecruit> recruitList = [];

    var res = await ApiProvider().post(
        '/Matching/Select/TeamMemberRecruitByTeamID',
        jsonEncode({
          'teamID': widget.team.id,
        }));

    if (res != null) {
      for (int i = 0; i < res.length; i++) {
        TeamMemberRecruit tmpRecruit = TeamMemberRecruit.fromJson(res[i]);
        recruitList.add(tmpRecruit);
      }
    }

    recruitList.forEach((e) {
      if (widget.teamMemberRecruit != null) {
        if (e.id != widget.teamMemberRecruit.id) if (setPeriodState(e.recruitPeriodEnd) != 'Î™®ÏßëÎßàÍ∞ê') countRecruit++;
      } else {
        if (setPeriodState(e.recruitPeriodEnd) != 'Î™®ÏßëÎßàÍ∞ê') countRecruit++;
      }
    });

    if (countRecruit < RECRUIT_LIMIT_TEAM) return;

    isCanRecruit = false;
    return;
  }

  void showCannotRecruitDialog(){
    showSheepsDialog(
      context: context,
      title: 'Ïù¥ÎØ∏ Î™®ÏßëÏ§ëÏù∏ Í∏ÄÏù¥\n$RECRUIT_LIMIT_TEAMÍ∞úÎÇò ÏûàÏñ¥Ïöî!',
      description: 'ÌòÑÏû¨ ÏõêÌôúÌïú ÏÑúÎπÑÏä§ Ïö¥ÏòÅ Î∞è Îß§Ïπ≠ÏùÑ ÏúÑÌï¥\nÏµúÎåÄ $RECRUIT_LIMIT_TEAMÍ∞úÍπåÏßÄ Î™®ÏßëÏ§ë ÏÉÅÌÉúÍ∞Ä Í∞ÄÎä•Ìï¥Ïöî.',
      isCancelButton: false,
    );
  }

  @override
  Widget build(BuildContext context) {
    return AnnotatedRegion<SystemUiOverlayStyle>(
      value: SystemUiOverlayStyle.dark,
      child: GestureDetector(
        onTap: () {
          unFocus(context);
        },
        child: MediaQuery(
          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0), //ÏÇ¨Ïö©Ïûê Ïä§ÏºÄÏùºÌå©ÌÑ∞ Î¨¥Ïãú
          child: Container(
            color: Colors.white,
            child: SafeArea(
              child: WillPopScope(
                onWillPop: () {
                  backFunc();
                  return Future.value(false);
                },
                child: Scaffold(
                  appBar: SheepsAppBar(context, 'ÌåÄÏõê Î™®ÏßëÌïòÎäî Í∏ÄÏì∞Í∏∞', backFunc: () {
                    showEditCancelDialog(okButtonColor: sheepsColorBlue);
                  }),
                  body: Column(
                    children: [
                      Padding(
                        padding: EdgeInsets.only(left: 16 * sizeUnit),
                        child: Obx(() {
                          return SheepsAnimatedTabBar(
                            barIndex: controller.barIndex.value,
                            pageController: pageController,
                            insidePadding: 20 * sizeUnit,
                            listTabItemTitle: ['Î™®ÏßëÏ†ïÎ≥¥', 'ÏßÄÏõêÏûêÍ≤©', 'Í∑ºÎ¨¥Ï°∞Í±¥'],
                            listTabItemWidth: [60 * sizeUnit, 60 * sizeUnit, 60 * sizeUnit],
                          );
                        }),
                      ),
                      Container(width: 360 * sizeUnit, height: 0.5 * sizeUnit, color: sheepsColorGrey),
                      Expanded(
                        child: PageView(
                          controller: pageController,
                          physics: NeverScrollableScrollPhysics(),
                          onPageChanged: (index) {
                            controller.setBarIndex(index);
                          },
                          children: [
                            recruitInfoPage(),
                            eligibilityPage(),
                            workConditionsPage(),
                          ],
                        ),
                      ),
                      Padding(
                        padding: EdgeInsets.all(20 * sizeUnit),
                        child: Obx(() {
                          return SheepsBottomButton(
                            context: context,
                            function: () {
                              unFocus(context);
                              switch (controller.getBarIndex()) {
                                case 0:
                                  {
                                    controller.setBarIndex(1);
                                    pageController.animateToPage(controller.getBarIndex(), duration: Duration(milliseconds: 500), curve: Curves.fastOutSlowIn);
                                  }
                                  break;
                                case 1:
                                  {
                                    controller.setBarIndex(2);
                                    pageController.animateToPage(controller.getBarIndex(), duration: Duration(milliseconds: 500), curve: Curves.fastOutSlowIn);
                                  }
                                  break;
                                case 2:
                                  {
                                    if (controller.checkFilledRequiredInfo()) {
                                      if (controller.checkFilledDetailQualification()) {
                                        showSheepsCustomDialog(
                                            title: Text(
                                              'ÏÉÅÏÑ∏ ÏûêÍ≤©ÏùÑ ÏûÖÎ†•ÌïòÏßÄ\nÏïäÏïòÏñ¥Ïöî üò¢',
                                              style: SheepsTextStyle.h5(),
                                              textAlign: TextAlign.center,
                                            ),
                                            contents: Text.rich(
                                              TextSpan(
                                                text: 'ÏÉÅÏÑ∏ ÏûêÍ≤©ÏùÑ ÏûÖÎ†•ÌïòÏãúÎ©¥,\nÌåÄÏõê Î™®Ïßë ÌôïÎ•†Ïù¥ ',
                                                children: [
                                                  TextSpan(
                                                    text: '6Î∞∞ Ïù¥ÏÉÅ ÎÜíÏïÑÏöî!',
                                                    style: SheepsTextStyle.h4(),
                                                  ),
                                                ],
                                              ),
                                              style: SheepsTextStyle.b3(),
                                              textAlign: TextAlign.center,
                                            ),
                                            okText: 'ÏûÖÎ†•ÌïòÍ∏∞',
                                            okFunc: () {
                                              controller.setBarIndex(1);
                                              pageController.animateToPage(controller.getBarIndex(), duration: Duration(milliseconds: 500), curve: Curves.fastOutSlowIn);
                                              Get.back();
                                            },
                                            isCancelButton: true,
                                            cancelText: 'ÎÑòÏñ¥Í∞ÄÍ∏∞',
                                            cancelFunc: () {
                                              if (isReady) {
                                                isReady = false;
                                                Future.microtask(() => Future.delayed(
                                                      Duration(milliseconds: 500),
                                                      () {
                                                        isReady = true;
                                                      },
                                                    ));
                                                upload();
                                              }
                                            });
                                      } else {
                                        if (isReady) {
                                          isReady = false;
                                          Future.microtask(() => Future.delayed(
                                                Duration(milliseconds: 500),
                                                () {
                                                  isReady = true;
                                                },
                                              ));
                                          upload();
                                        }
                                      }
                                    } else {
                                      showSheepsCustomDialog(
                                          title: Text.rich(
                                            TextSpan(
                                              text: 'ÌïÑÏàò Ï†ïÎ≥¥',
                                              children: [
                                                TextSpan(
                                                  text: '*',
                                                  style: TextStyle(color: sheepsColorGreen),
                                                ),
                                                TextSpan(text: ' Î•º\nÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!')
                                              ],
                                            ),
                                            style: SheepsTextStyle.h5(),
                                            textAlign: TextAlign.center,
                                          ),
                                          contents: Text.rich(
                                            TextSpan(
                                              text: '',
                                              children: [
                                                TextSpan(
                                                  text: '*',
                                                  style: TextStyle(color: sheepsColorGreen),
                                                ),
                                                TextSpan(text: 'Í∞Ä Î∂ôÏñ¥ÏûàÎäî ÏûÖÎ†•Ïπ∏ÏùÄ\nÌïÑÏàòÎ°ú Ï±ÑÏõåÏ£ºÏÖîÏïº Ìï©ÎãàÎã§!')
                                              ],
                                            ),
                                            style: SheepsTextStyle.b3(),
                                            textAlign: TextAlign.center,
                                          ),
                                          okFunc: () {
                                            if (!controller.checkActiveNext1()) {
                                              controller.setBarIndex(0);
                                              pageController.animateToPage(controller.getBarIndex(), duration: Duration(milliseconds: 500), curve: Curves.fastOutSlowIn);
                                            } else if (!controller.checkActiveNext2()) {
                                              controller.setBarIndex(1);
                                              pageController.animateToPage(controller.getBarIndex(), duration: Duration(milliseconds: 500), curve: Curves.fastOutSlowIn);
                                            }
                                            Get.back();
                                          });
                                    }
                                  }
                                  break;
                              }
                            },
                            text: controller.getBarIndex() == 2 ? 'Íµ¨ÏßÅ ÏãúÏûë!' : 'Îã§Ïùå',
                            isOK: controller.barIndex.value == 0
                                ? controller.checkActiveNext1()
                                : controller.barIndex.value == 1
                                    ? controller.checkActiveNext2()
                                    : controller.checkFilledRequiredInfo(),
                            color: sheepsColorGreen,
                          );
                        }),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget recruitInfoPage() {
    return ListView(
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 16 * sizeUnit),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(children: [SizedBox(height: 20 * sizeUnit)]), //Í∞ÄÎ°úÍ∏∏Ïù¥ Ï±ÑÏö∞Í∏∞Ïö© Row
              Text.rich(
                TextSpan(
                  text: 'Î™®Ïßë Ï†úÎ™©',
                  children: [TextSpan(text: '*', style: TextStyle(color: sheepsColorGreen))],
                ),
                style: SheepsTextStyle.h3(),
              ),
              SizedBox(height: 4 * sizeUnit),
              Obx(() => sheepsTextField(
                  context,
                  controller: titleController,
                  hintText: 'Î™®Ïßë Ï†úÎ™© ÏûÖÎ†•',
                  errorText: removeSpace(controller.title.value).length > 42 ? 'Ï†úÎ™©ÏùÄ 42Ïûê Ïù¥ÌïòÎ°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' : null,
                  onChanged: (val) {
                    controller.title.value = val;
                    controller.checkActiveNext1();
                    controller.checkFilledRequiredInfo();
                  },
                  onPressClear: () {
                    titleController.clear();
                    controller.title.value = '';
                    controller.checkActiveNext1();
                    controller.checkFilledRequiredInfo();
                  },
                  borderColor: sheepsColorGreen,
                ),
              ),
              SizedBox(height: 20 * sizeUnit),
              Row(
                children: [
                  Text.rich(
                    TextSpan(
                      text: 'Î™®ÏßëÍ∏∞Í∞Ñ',
                      children: [TextSpan(text: '*', style: TextStyle(color: sheepsColorGreen))],
                    ),
                    style: SheepsTextStyle.h3(),
                  ),
                  SizedBox(width: 18 * sizeUnit),
                  GestureDetector(
                    onTap: () {
                      //Î™®ÏßëÏ§ë Î¶¨Ïø†Î•¥Ìä∏ Í∏Ä Í∞ØÏàò Ï†úÌïú
                      if(isCanRecruit){
                        controller.isAlwaysRecruit.value = !controller.isAlwaysRecruit.value;
                        if (controller.isAlwaysRecruit.value) {
                          controller.recruitPeriodEnd.value = 'ÏÉÅÏãúÎ™®Ïßë';
                        } else {
                          controller.recruitPeriodEnd.value = '';
                        }
                        controller.checkActiveNext1();
                        controller.checkFilledRequiredInfo();
                      }else{
                        showCannotRecruitDialog();
                      }
                    },
                    child: Obx(() => sheepsCheckBox('ÏÉÅÏãúÎ™®Ïßë', controller.isAlwaysRecruit.value)),
                  ),
                ],
              ),
              SizedBox(height: 12 * sizeUnit),
              Row(
                children: [
                  Expanded(
                    child: GestureDetector(
                      onTap: () {
                        unFocus(context);
                        showDatePicker(
                          context: context,
                          initialDate: DateTime.now(),
                          firstDate: DateTime.now(),
                          lastDate: DateTime.now(),
                          helpText: 'ÎÇ†Ïßú ÏÑ†ÌÉù',
                          cancelText: 'Ï∑®ÏÜå',
                          confirmText: 'ÌôïÏù∏',
                          locale: const Locale('ko', 'KR'),
                          errorFormatText: 'ÌòïÏãùÏù¥ ÎßûÏßÄ ÏïäÏäµÎãàÎã§.',
                          errorInvalidText: 'ÌòïÏãùÏù¥ ÎßûÏßÄ ÏïäÏäµÎãàÎã§!',
                          fieldLabelText: 'ÎÇ†Ïßú ÏûÖÎ†•',
                          builder: (context, child) {
                            return Theme(
                              data: ThemeData(
                                fontFamily: 'SpoqaHanSansNeo',
                                colorScheme: ColorScheme.fromSwatch(
                                  primarySwatch: Colors.grey,
                                ),
                              ),
                              child: child,
                            );
                          },
                        ).then((value) {
                          if (value != null) {
                            controller.recruitPeriodStart.value = value.year.toString() + 'ÎÖÑ ';

                            if (value.month < 10) {
                              controller.recruitPeriodStart.value = controller.recruitPeriodStart.value + '0' + value.month.toString() + 'Ïõî ';
                            } else {
                              controller.recruitPeriodStart.value = controller.recruitPeriodStart.value + value.month.toString() + 'Ïõî ';
                            }

                            if (value.day < 10) {
                              controller.recruitPeriodStart.value = controller.recruitPeriodStart.value + '0' + value.day.toString() + 'Ïùº';
                            } else {
                              controller.recruitPeriodStart.value = controller.recruitPeriodStart.value + value.day.toString() + 'Ïùº';
                            }
                          }
                          if (controller.recruitPeriodStart.value.compareTo(controller.recruitPeriodEnd.value) == 1) controller.recruitPeriodEnd.value = '';
                          controller.checkActiveNext1();
                          controller.checkFilledRequiredInfo();
                        });
                      },
                      child: Obx(() => pickDateContainer(text: controller.recruitPeriodStart.value, isNeedDay: true)),
                    ),
                  ),
                  SizedBox(width: 14 * sizeUnit),
                  Container(
                    width: 8 * sizeUnit,
                    height: 1 * sizeUnit,
                    color: controller.recruitPeriodStart.value.isEmpty || controller.recruitPeriodEnd.value.isEmpty ? sheepsColorGrey : sheepsColorGreen,
                  ),
                  SizedBox(width: 14 * sizeUnit),
                  Expanded(
                    child: GestureDetector(
                      onTap: () {
                        unFocus(context);

                        //Î™®ÏßëÏ§ë Î¶¨Ïø†Î•¥Ìä∏ Í∏Ä Í∞ØÏàò Ï†úÌïú
                        if(isCanRecruit){
                          if (!controller.isAlwaysRecruit.value) {
                            //ÏÉÅÏãúÎ™®ÏßëÏù¥Î©¥ ÎÇ†Ïßú ÏÑ†ÌÉù Î∂àÍ∞Ä
                            showDatePicker(
                              context: context,
                              initialDate: DateTime.now(),
                              firstDate: DateTime.now(),
                              lastDate: DateTime(DateTime.now().year + 1, 12, 31),
                              helpText: 'ÎÇ†Ïßú ÏÑ†ÌÉù',
                              cancelText: 'Ï∑®ÏÜå',
                              confirmText: 'ÌôïÏù∏',
                              locale: const Locale('ko', 'KR'),
                              errorFormatText: 'ÌòïÏãùÏù¥ ÎßûÏßÄ ÏïäÏäµÎãàÎã§.',
                              errorInvalidText: 'ÌòïÏãùÏù¥ ÎßûÏßÄ ÏïäÏäµÎãàÎã§!',
                              fieldLabelText: 'ÎÇ†Ïßú ÏûÖÎ†•',
                              builder: (context, child) {
                                return Theme(
                                  data: ThemeData(
                                    fontFamily: 'SpoqaHanSansNeo',
                                    colorScheme: ColorScheme.fromSwatch(
                                      primarySwatch: Colors.grey,
                                    ),
                                  ),
                                  child: child,
                                );
                              },
                            ).then((value) {
                              if (value != null) {
                                controller.recruitPeriodEnd.value = value.year.toString() + 'ÎÖÑ ';

                                if (value.month < 10) {
                                  controller.recruitPeriodEnd.value = controller.recruitPeriodEnd.value + '0' + value.month.toString() + 'Ïõî ';
                                } else {
                                  controller.recruitPeriodEnd.value = controller.recruitPeriodEnd.value + value.month.toString() + 'Ïõî ';
                                }

                                if (value.day < 10) {
                                  controller.recruitPeriodEnd.value = controller.recruitPeriodEnd.value + '0' + value.day.toString() + 'Ïùº';
                                } else {
                                  controller.recruitPeriodEnd.value = controller.recruitPeriodEnd.value + value.day.toString() + 'Ïùº';
                                }
                              }
                              controller.checkActiveNext1();
                              controller.checkFilledRequiredInfo();
                            });
                          }
                        }else{
                          showCannotRecruitDialog();
                        }
                      },
                      child: Obx(() => pickDateContainer(text: controller.recruitPeriodEnd.value, isNeedDay: true)),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 20 * sizeUnit),
              Text.rich(
                TextSpan(
                  text: 'Î™®Ïßë ÏÜåÍ∞ú',
                  children: [TextSpan(text: '*', style: TextStyle(color: sheepsColorGreen))],
                ),
                style: SheepsTextStyle.h3(),
              ),
              SizedBox(height: 12 * sizeUnit),
              multiLineTextField(
                controller: infoController,
                maxTextLength: 250,
                hintText: 'ÌåÄ„ÉªÏä§ÌÉÄÌä∏ÏóÖ ÏÜåÍ∞ú Î∞è Î™®ÏßëÍ∞úÏöî Îì± ÏûÖÎ†•',
                borderColor: sheepsColorGreen,
                onChange: (val) {
                  controller.recruitInfo.value = val;
                  controller.checkActiveNext1();
                  controller.checkFilledRequiredInfo();
                },
              ),
              SizedBox(height: 8 * sizeUnit),
              GestureDetector(
                onTap: () {
                  if (widget.team.information != null) {
                    infoController.text = widget.team.information;
                    controller.recruitInfo.value = widget.team.information;
                  }
                },
                child: Container(
                  height: 32 * sizeUnit,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    border: Border.all(color: sheepsColorGreen, width: 1 * sizeUnit),
                    borderRadius: BorderRadius.circular(16 * sizeUnit),
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Padding(
                        padding: EdgeInsets.symmetric(horizontal: 12 * sizeUnit),
                        child: Text(
                          'ÌîÑÎ°úÌïÑ ÏÜåÍ∞úÍ∏Ä Î∂àÎü¨Ïò§Í∏∞',
                          style: SheepsTextStyle.hint4Profile().copyWith(color: sheepsColorGreen),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              SizedBox(height: 20 * sizeUnit),
              Text.rich(
                TextSpan(
                  text: 'Ïπ¥ÌÖåÍ≥†Î¶¨',
                  children: [TextSpan(text: '*', style: TextStyle(color: sheepsColorGreen))],
                ),
                style: SheepsTextStyle.h3(),
              ),
              SizedBox(height: 12 * sizeUnit),
              Wrap(
                spacing: 10 * sizeUnit,
                runSpacing: 10 * sizeUnit,
                children: [
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isCategoryStartup.value = true;
                      controller.isCategorySupport.value = false;
                      controller.isCategoryCompetition.value = false;
                      controller.isCategorySmallClass.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'ÌåÄ„ÉªÏä§ÌÉÄÌä∏ÏóÖ', isSelected: controller.isCategoryStartup.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isCategoryStartup.value = false;
                      controller.isCategorySupport.value = true;
                      controller.isCategoryCompetition.value = false;
                      controller.isCategorySmallClass.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'ÏßÄÏõêÏÇ¨ÏóÖ', isSelected: controller.isCategorySupport.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isCategoryStartup.value = false;
                      controller.isCategorySupport.value = false;
                      controller.isCategoryCompetition.value = true;
                      controller.isCategorySmallClass.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'Í≥µÎ™®Ï†Ñ', isSelected: controller.isCategoryCompetition.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isCategoryStartup.value = false;
                      controller.isCategorySupport.value = false;
                      controller.isCategoryCompetition.value = false;
                      controller.isCategorySmallClass.value = true;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'ÏÜåÎ™®ÏûÑ', isSelected: controller.isCategorySmallClass.value, color: sheepsColorGreen);
                    }),
                  ),
                ],
              ),
              SizedBox(height: 20 * sizeUnit),
              Text.rich(
                TextSpan(
                  text: 'Î™®ÏßëÎ∂ÑÏïº',
                  children: [TextSpan(text: '*', style: TextStyle(color: sheepsColorGreen))],
                ),
                style: SheepsTextStyle.h3(),
              ),
              SizedBox(height: 12 * sizeUnit),
              GestureDetector(
                onTap: () {
                  Get.to(() => SelectField()).then((value) {
                    if (value != null) {
                      controller.recruitJob = value[0];
                      controller.recruitPart.value = value[1];
                      controller.checkActiveNext1();
                      controller.checkFilledRequiredInfo();
                    }
                  });
                },
                child: Obx(() {
                  return sheepsSelectContainer(
                    text: controller.recruitPart.value.isEmpty ? 'Î∂ÑÏïº ÏÑ†ÌÉù' : controller.recruitPart.value,
                    isSelected: controller.recruitPart.value.isNotEmpty,
                    color: sheepsColorGreen,
                  );
                }),
              ),
              SizedBox(height: 20 * sizeUnit),
              Text.rich(
                TextSpan(
                  text: 'Ïó≠Ìï†',
                  children: [TextSpan(text: '*', style: TextStyle(color: sheepsColorGreen))],
                ),
                style: SheepsTextStyle.h3(),
              ),
              SizedBox(height: 12 * sizeUnit),
              multiLineTextField(
                controller: roleContentsController,
                maxTextLength: 250,
                hintText: 'Ïó≠Ìï† ÏûÖÎ†•',
                borderColor: sheepsColorGreen,
                onChange: (val) {
                  controller.roleContents.value = val;
                  controller.checkActiveNext1();
                  controller.checkFilledRequiredInfo();
                },
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget eligibilityPage() {
    return ListView(
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 16 * sizeUnit),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              SizedBox(height: 20 * sizeUnit),
              Row(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text.rich(
                    TextSpan(
                      text: 'ÌïôÎ†•',
                      children: [TextSpan(text: '*', style: TextStyle(color: sheepsColorGreen))],
                    ),
                    style: SheepsTextStyle.h3(),
                  ),
                  SizedBox(width: 8 * sizeUnit),
                  Text('1Í∞ú ÏÑ†ÌÉù', style: SheepsTextStyle.info2()),
                ],
              ),
              SizedBox(height: 12 * sizeUnit),
              Wrap(
                spacing: 10 * sizeUnit,
                runSpacing: 10 * sizeUnit,
                children: [
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isEduAny.value = true;
                      controller.isEduHighSchool.value = false;
                      controller.isEduCollege.value = false;
                      controller.isEduBachelor.value = false;
                      controller.isEduMaster.value = false;
                      controller.isEduDoctor.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'ÌïôÎ†•Î¨¥Í¥Ä', isSelected: controller.isEduAny.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isEduAny.value = false;
                      controller.isEduHighSchool.value = true;
                      controller.isEduCollege.value = false;
                      controller.isEduBachelor.value = false;
                      controller.isEduMaster.value = false;
                      controller.isEduDoctor.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'Í≥†Ï°∏Ïù¥ÏÉÅ', isSelected: controller.isEduHighSchool.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isEduAny.value = false;
                      controller.isEduHighSchool.value = false;
                      controller.isEduCollege.value = true;
                      controller.isEduBachelor.value = false;
                      controller.isEduMaster.value = false;
                      controller.isEduDoctor.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'Ï¥àÎåÄÏ°∏Ïù¥ÏÉÅ', isSelected: controller.isEduCollege.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isEduAny.value = false;
                      controller.isEduHighSchool.value = false;
                      controller.isEduCollege.value = false;
                      controller.isEduBachelor.value = true;
                      controller.isEduMaster.value = false;
                      controller.isEduDoctor.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'ÎåÄÏ°∏Ïù¥ÏÉÅ', isSelected: controller.isEduBachelor.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isEduAny.value = false;
                      controller.isEduHighSchool.value = false;
                      controller.isEduCollege.value = false;
                      controller.isEduBachelor.value = false;
                      controller.isEduMaster.value = true;
                      controller.isEduDoctor.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'ÏÑùÏÇ¨Ïù¥ÏÉÅ', isSelected: controller.isEduMaster.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isEduAny.value = false;
                      controller.isEduHighSchool.value = false;
                      controller.isEduCollege.value = false;
                      controller.isEduBachelor.value = false;
                      controller.isEduMaster.value = false;
                      controller.isEduDoctor.value = true;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'Î∞ïÏÇ¨Ï°∏ÏóÖ', isSelected: controller.isEduDoctor.value, color: sheepsColorGreen);
                    }),
                  ),
                ],
              ),
              SizedBox(height: 20 * sizeUnit),
              Row(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text.rich(
                    TextSpan(
                      text: 'Í≤ΩÎ†•',
                      children: [TextSpan(text: '*', style: TextStyle(color: sheepsColorGreen))],
                    ),
                    style: SheepsTextStyle.h3(),
                  ),
                  SizedBox(width: 8 * sizeUnit),
                  Text('1Í∞ú ÏÑ†ÌÉù', style: SheepsTextStyle.info2()),
                ],
              ),
              SizedBox(height: 12 * sizeUnit),
              Wrap(
                spacing: 10 * sizeUnit,
                runSpacing: 10 * sizeUnit,
                children: [
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isCareerNew.value = true;
                      controller.isCareerCareer.value = false;
                      controller.isCareerAny.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'Ïã†ÏûÖ', isSelected: controller.isCareerNew.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isCareerNew.value = false;
                      controller.isCareerCareer.value = true;
                      controller.isCareerAny.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'Í≤ΩÎ†•', isSelected: controller.isCareerCareer.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isCareerNew.value = false;
                      controller.isCareerCareer.value = false;
                      controller.isCareerAny.value = true;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'Í≤ΩÎ†•Î¨¥Í¥Ä', isSelected: controller.isCareerAny.value, color: sheepsColorGreen);
                    }),
                  ),
                ],
              ),
              SizedBox(height: 20 * sizeUnit),
              Text.rich(
                TextSpan(
                  text: 'ÏÉÅÏÑ∏ ÏßÄÏõêÏûêÍ≤©',
                ),
                style: SheepsTextStyle.h3(),
              ),
              SizedBox(height: 12 * sizeUnit),
              multiLineTextField(
                controller: detailEligibilityController,
                maxTextLength: 200,
                hintText: 'ÏûêÍ≤© ÏöîÍ±¥ ÏûÖÎ†•',
                borderColor: sheepsColorGreen,
                onChange: (val) {
                  controller.detailEligibility.value = val;
                },
              ),
              Row(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text.rich(
                    TextSpan(
                      text: 'Ïö∞ÎåÄÏÇ¨Ìï≠',
                    ),
                    style: SheepsTextStyle.h3(),
                  ),
                  SizedBox(width: 8 * sizeUnit),
                  Text('Ï§ëÎ≥µ ÏÑ†ÌÉù Í∞ÄÎä•', style: SheepsTextStyle.info2()),
                ],
              ),
              SizedBox(height: 12 * sizeUnit),
              multipleSelectionWrap(
                inputList: ['Í¥ÄÎ†® Ï†ÑÍ≥µ', 'Í¥ÄÎ†® ÏûêÍ≤©Ï¶ù', 'Ïù∏Í∑ºÍ±∞Ï£º', 'ÏàòÏÉÅÍ≤ΩÎ†•', 'ÏòÅÏñ¥Í∞ÄÎä•', 'Ï§ëÍµ≠Ïñ¥ Í∞ÄÎä•', 'Î¨∏ÏÑúÏûëÏÑ± Ïö∞Ïàò'],
                selectedList: controller.preferenceInfoList,
                maxSelect: 7,
                isCanSelectAll: true,
              ),
              SizedBox(height: 20 * sizeUnit),
              Text.rich(
                TextSpan(
                  text: 'ÏÉÅÏÑ∏ Ïö∞ÎåÄÏÇ¨Ìï≠',
                ),
                style: SheepsTextStyle.h3(),
              ),
              SizedBox(height: 12 * sizeUnit),
              multiLineTextField(
                controller: detailPreferenceInfoContentsController,
                maxTextLength: 200,
                hintText: 'Ïö∞ÎåÄ ÏöîÍ±¥ ÏûÖÎ†•',
                borderColor: sheepsColorGreen,
                onChange: (val) {
                  controller.detailPreferenceInfoContents.value = val;
                },
              ),
              SizedBox(height: 20 * sizeUnit),
            ],
          ),
        ),
      ],
    );
  }

  Widget workConditionsPage() {
    return ListView(
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 16 * sizeUnit),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              SizedBox(height: 20 * sizeUnit),
              Row(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text.rich(
                    TextSpan(
                      text: 'Í∑ºÎ¨¥ÌòïÌÉú',
                      children: [TextSpan(text: '*', style: TextStyle(color: sheepsColorGreen))],
                    ),
                    style: SheepsTextStyle.h3(),
                  ),
                  SizedBox(width: 8 * sizeUnit),
                  Text('ÏµúÎåÄ 2Í∞ú ÏÑ†ÌÉù', style: SheepsTextStyle.info2()),
                ],
              ),
              SizedBox(height: 12 * sizeUnit),
              multipleSelectionWrap(
                inputList: ['Í≥µÎèôÏ∞ΩÏóÖ', 'ÌåÄÏõê', 'Ï†ïÍ∑úÏßÅ', 'Í≥ÑÏïΩÏßÅ', 'Ïù∏ÌÑ¥', 'ÌîÑÎ¶¨ÎûúÏÑú', 'Ïû¨ÌÉùÍ∑ºÎ¨¥', 'ÏïÑÎ•¥Î∞îÏù¥Ìä∏', 'ÌòëÏùò'],
                selectedList: controller.workFormList,
                maxSelect: 2,
              ),
              SizedBox(height: 20 * sizeUnit),
              Row(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text.rich(
                    TextSpan(
                      text: 'Í∑ºÎ¨¥ÏöîÏùº',
                      children: [TextSpan(text: '*', style: TextStyle(color: sheepsColorGreen))],
                    ),
                    style: SheepsTextStyle.h3(),
                  ),
                  SizedBox(width: 8 * sizeUnit),
                  Text('1Í∞ú ÏÑ†ÌÉù', style: SheepsTextStyle.info2()),
                ],
              ),
              SizedBox(height: 12 * sizeUnit),
              Wrap(
                spacing: 10 * sizeUnit,
                runSpacing: 10 * sizeUnit,
                children: [
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isWorkDayOfWeek5.value = true;
                      controller.isWorkDayOfWeek6.value = false;
                      controller.isWorkDayOfWeek3.value = false;
                      controller.isWorkDayOfWeekFlexible.value = false;
                      controller.isWorkDayOfWeekNegotiable.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'Ï£º 5Ïùº', isSelected: controller.isWorkDayOfWeek5.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isWorkDayOfWeek5.value = false;
                      controller.isWorkDayOfWeek6.value = true;
                      controller.isWorkDayOfWeek3.value = false;
                      controller.isWorkDayOfWeekFlexible.value = false;
                      controller.isWorkDayOfWeekNegotiable.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'Ï£º 6Ïùº', isSelected: controller.isWorkDayOfWeek6.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isWorkDayOfWeek5.value = false;
                      controller.isWorkDayOfWeek6.value = false;
                      controller.isWorkDayOfWeek3.value = true;
                      controller.isWorkDayOfWeekFlexible.value = false;
                      controller.isWorkDayOfWeekNegotiable.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'Ï£º 3Ïùº', isSelected: controller.isWorkDayOfWeek3.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isWorkDayOfWeek5.value = false;
                      controller.isWorkDayOfWeek6.value = false;
                      controller.isWorkDayOfWeek3.value = false;
                      controller.isWorkDayOfWeekFlexible.value = true;
                      controller.isWorkDayOfWeekNegotiable.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'ÌÉÑÎ†•Í∑ºÎ¨¥Ï†ú', isSelected: controller.isWorkDayOfWeekFlexible.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isWorkDayOfWeek5.value = false;
                      controller.isWorkDayOfWeek6.value = false;
                      controller.isWorkDayOfWeek3.value = false;
                      controller.isWorkDayOfWeekFlexible.value = false;
                      controller.isWorkDayOfWeekNegotiable.value = true;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'ÌòëÏùò', isSelected: controller.isWorkDayOfWeekNegotiable.value, color: sheepsColorGreen);
                    }),
                  ),
                ],
              ),
              SizedBox(height: 20 * sizeUnit),
              Row(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text.rich(
                    TextSpan(
                      text: 'Í∑ºÎ¨¥ÏãúÍ∞Ñ',
                      children: [TextSpan(text: '*', style: TextStyle(color: sheepsColorGreen))],
                    ),
                    style: SheepsTextStyle.h3(),
                  ),
                  SizedBox(width: 8 * sizeUnit),
                  Text('1Í∞ú ÏÑ†ÌÉù', style: SheepsTextStyle.info2()),
                ],
              ),
              SizedBox(height: 12 * sizeUnit),
              Wrap(
                spacing: 10 * sizeUnit,
                runSpacing: 10 * sizeUnit,
                children: [
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isWorkTime8.value = true;
                      controller.isWorkTimeFlexible.value = false;
                      controller.isWorkTimeAutonomous.value = false;
                      controller.isWorkTimeNegotiable.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: '1Ïùº 8ÏãúÍ∞Ñ', isSelected: controller.isWorkTime8.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isWorkTime8.value = false;
                      controller.isWorkTimeFlexible.value = true;
                      controller.isWorkTimeAutonomous.value = false;
                      controller.isWorkTimeNegotiable.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'ÌÉÑÎ†•Í∑ºÎ¨¥', isSelected: controller.isWorkTimeFlexible.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isWorkTime8.value = false;
                      controller.isWorkTimeFlexible.value = false;
                      controller.isWorkTimeAutonomous.value = true;
                      controller.isWorkTimeNegotiable.value = false;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'ÏûêÏú®', isSelected: controller.isWorkTimeAutonomous.value, color: sheepsColorGreen);
                    }),
                  ),
                  GestureDetector(
                    onTap: () {
                      unFocus(context);
                      controller.isWorkTime8.value = false;
                      controller.isWorkTimeFlexible.value = false;
                      controller.isWorkTimeAutonomous.value = false;
                      controller.isWorkTimeNegotiable.value = true;
                    },
                    child: Obx(() {
                      return sheepsSelectContainer(text: 'ÌòëÏùò', isSelected: controller.isWorkTimeNegotiable.value, color: sheepsColorGreen);
                    }),
                  ),
                ],
              ),
              SizedBox(height: 20 * sizeUnit),
              Row(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text.rich(
                    TextSpan(
                      text: 'Î≥µÎ¶¨ÌõÑÏÉù',
                    ),
                    style: SheepsTextStyle.h3(),
                  ),
                  SizedBox(width: 8 * sizeUnit),
                  Text('Ï§ëÎ≥µ ÏÑ†ÌÉù Í∞ÄÎä•', style: SheepsTextStyle.info2()),
                ],
              ),
              SizedBox(height: 12 * sizeUnit),
              multipleSelectionWrap(
                inputList: ['ÏÉÅÏó¨Í∏à', 'Ïä§ÌÜ°ÏòµÏÖò', '4ÎåÄÎ≥¥Ìóò', 'Ïó∞Ï∞®', 'ÎãâÎÑ§ÏûÑ', 'Ï±ÑÏõÄÍ≥µÏ†ú', 'ÏóÖÎ¨¥Ïû•ÎπÑ Ï†úÍ≥µ', 'Ìú¥Í≤åÏã§', 'ÏπºÌá¥Í∑º'],
                selectedList: controller.welfareList,
                maxSelect: 9,
                isCanSelectAll: true,
              ),
              SizedBox(height: 20 * sizeUnit),
              Text.rich(
                TextSpan(
                  text: 'ÏÉÅÏÑ∏ Í∑ºÎ¨¥Ï°∞Í±¥',
                ),
                style: SheepsTextStyle.h3(),
              ),
              SizedBox(height: 12 * sizeUnit),
              multiLineTextField(
                controller: needWorkConditionController,
                maxTextLength: 250,
                hintText: 'ÏÉÅÏÑ∏ Í∑ºÎ¨¥Ï°∞Í±¥ ÏûÖÎ†•',
                borderColor: sheepsColorGreen,
                onChange: (val) {
                  controller.detailWorkCondition.value = val;
                },
              ),
            ],
          ),
        ),
      ],
    );
  }

  Future upload() async {
    Future.microtask(() async {
      String category = '';
      if (controller.isCategoryStartup.value) {
        category = 'ÌåÄ„ÉªÏä§ÌÉÄÌä∏ÏóÖ';
      } else if (controller.isCategorySupport.value) {
        category = 'ÏßÄÏõêÏÇ¨ÏóÖ';
      } else if (controller.isCategoryCompetition.value) {
        category = 'Í≥µÎ™®Ï†Ñ';
      } else if (controller.isCategorySmallClass.value) {
        category = 'ÏÜåÎ™®ÏûÑ';
      }

      String education = '';
      if (controller.isEduAny.value) {
        education = 'ÌïôÎ†•Î¨¥Í¥Ä';
      } else if (controller.isEduHighSchool.value) {
        education = 'Í≥†Ï°∏Ïù¥ÏÉÅ';
      } else if (controller.isEduCollege.value) {
        education = 'Ï¥àÎåÄÏ°∏Ïù¥ÏÉÅ';
      } else if (controller.isEduBachelor.value) {
        education = 'ÎåÄÏ°∏Ïù¥ÏÉÅ';
      } else if (controller.isEduMaster.value) {
        education = 'ÏÑùÏÇ¨Ïù¥ÏÉÅ';
      } else if (controller.isEduDoctor.value) {
        education = 'Î∞ïÏÇ¨Ï°∏ÏóÖ';
      }

      String career = '';
      if (controller.isCareerNew.value) {
        career = 'Ïã†ÏûÖ';
      } else if (controller.isCareerCareer.value) {
        career = 'Í≤ΩÎ†•';
      } else if (controller.isCareerAny.value) {
        career = 'Í≤ΩÎ†•Î¨¥Í¥Ä';
      }

      String preferenceInfo = '';
      for (int i = 0; i < controller.preferenceInfoList.length; i++) {
        if (i == 0) {
          preferenceInfo = controller.preferenceInfoList[i];
        } else {
          preferenceInfo = preferenceInfo + ' | ' + controller.preferenceInfoList[i];
        }
      }

      String workDayOfWeek = '';
      if (controller.isWorkDayOfWeek5.value) {
        workDayOfWeek = 'Ï£º 5Ïùº';
      } else if (controller.isWorkDayOfWeek6.value) {
        workDayOfWeek = 'Ï£º 6Ïùº';
      } else if (controller.isWorkDayOfWeek3.value) {
        workDayOfWeek = 'Ï£º 3Ïùº';
      } else if (controller.isWorkDayOfWeekFlexible.value) {
        workDayOfWeek = 'ÌÉÑÎ†•Í∑ºÎ¨¥Ï†ú';
      } else if (controller.isWorkDayOfWeekNegotiable.value) {
        workDayOfWeek = 'ÌòëÏùò';
      }

      String workTime = '';
      if (controller.isWorkTime8.value) {
        workTime = '1Ïùº 8ÏãúÍ∞Ñ';
      } else if (controller.isWorkTimeFlexible.value) {
        workTime = 'ÌÉÑÎ†•Í∑ºÎ¨¥';
      } else if (controller.isWorkTimeAutonomous.value) {
        workTime = 'ÏûêÏú®';
      } else if (controller.isWorkTimeNegotiable.value) {
        workTime = 'ÌòëÏùò';
      }

      String welfare = '';
      for (int i = 0; i < controller.welfareList.length; i++) {
        if (i == 0) {
          welfare = controller.welfareList[i];
        } else {
          welfare = welfare + ' | ' + controller.welfareList[i];
        }
      }

      if (isEdit) {
        DialogBuilder(context).showLoadingIndicator();

        await ApiProvider().post(
            '/Matching/Update/TeamMemberRecruit',
            jsonEncode({
              'id': widget.teamMemberRecruit.id,
              'teamID': widget.teamMemberRecruit.teamId,
              'title': controller.title.value + '||' + widget.team.name,
              'recruitPeriodStart': controller.recruitPeriodStart.value.replaceAll('ÎÖÑ ', '').replaceAll('Ïõî ', '').replaceAll('Ïùº', '') + '000000',
              'recruitPeriodEnd': controller.recruitPeriodEnd.value == 'ÏÉÅÏãúÎ™®Ïßë' ? 'ÏÉÅÏãúÎ™®Ïßë' : controller.recruitPeriodEnd.value.replaceAll('ÎÖÑ ', '').replaceAll('Ïõî ', '').replaceAll('Ïùº', '') + '235959',
              'recruitInfo': controlSpace(controller.recruitInfo.value),
              'category': category,
              'servicePart': widget.team.part,
              'location': widget.team.location,
              'subLocation': widget.team.subLocation,
              'recruitField': controller.recruitJob,
              'recruitSubField': controller.recruitPart.value,
              'roleContents': controlSpace(controller.roleContents.value),
              'education': education,
              'career': career,
              'detailVolunteerQualification': controller.detailEligibility.value,
              'preferenceInfo': preferenceInfo,
              'detailPreferenceInfoContents': controlSpace(controller.detailPreferenceInfoContents.value),
              'workFormFirst': controller.workFormList[0],
              'workFormSecond': controller.workFormList.length > 1 ? controller.workFormList[1] : '',
              'workDayOfWeek': workDayOfWeek,
              'workTime': workTime,
              'welfare': welfare,
              'detailWorkCondition': controlSpace(controller.detailWorkCondition.value),
            }));

        TeamMemberRecruit modifiedTeamMemberRecruit = TeamMemberRecruit(
          id: widget.teamMemberRecruit.id,
          teamId: widget.teamMemberRecruit.teamId,
          title: controller.title.value + '||' + widget.team.name,
          recruitPeriodStart: controller.recruitPeriodStart.value.replaceAll('ÎÖÑ ', '').replaceAll('Ïõî ', '').replaceAll('Ïùº', '') + '000000',
          recruitPeriodEnd: controller.recruitPeriodEnd.value == 'ÏÉÅÏãúÎ™®Ïßë' ? 'ÏÉÅÏãúÎ™®Ïßë' : controller.recruitPeriodEnd.value.replaceAll('ÎÖÑ ', '').replaceAll('Ïõî ', '').replaceAll('Ïùº', '') + '235959',
          recruitInfo: controlSpace(controller.recruitInfo.value),
          category: category,
          servicePart: widget.team.part,
          location: widget.team.location,
          subLocation: widget.team.subLocation,
          recruitField: controller.recruitJob,
          recruitSubField: controller.recruitPart.value,
          roleContents: controlSpace(controller.roleContents.value),
          education: education,
          career: career,
          detailVolunteerQualification: controller.detailEligibility.value,
          preferenceInfo: preferenceInfo,
          detailPreferenceInfoContents: controlSpace(controller.detailPreferenceInfoContents.value),
          workFormFirst: controller.workFormList[0],
          workFormSecond: controller.workFormList.length > 1 ? controller.workFormList[1] : '',
          workDayOfWeek: workDayOfWeek,
          workTime: workTime,
          welfare: welfare,
          detailWorkCondition: controlSpace(controller.detailWorkCondition.value),
          createdAt: getYearMonthDayByDate(),
          updateAt: getYearMonthDayByDate(),
        );

        for (int i = 0; i < globalTeamMemberRecruitList.length; i++) {
          if (globalTeamMemberRecruitList[i].id == modifiedTeamMemberRecruit.id) {
            globalTeamMemberRecruitList[i] = modifiedTeamMemberRecruit;
            break;
          }
        }

        DialogBuilder(context).hideOpenDialog();

        showSheepsDialog(
          context: context,
          title: 'Î™®ÏßëÍ∏ÄÏù¥\nÏàòÏ†ïÎêòÏóàÏñ¥Ïöî üòÑ',
          description: 'Ï†úÏïàÏù¥ Ïò§Î©¥, Î©¥Ï†ë Ï±ÑÌåÖÎ∞©Ïù¥ ÏÉùÍ≤®Ïöî!\nÏ∂©Î∂ÑÌûà ÎåÄÌôî ÌõÑ Í≤∞Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.',
          okText: 'Í≤åÏãúÍ∏Ä ÌôïÏù∏ÌïòÍ∏∞',
          isCancelButton: false,
          isBarrierDismissible: false,
        ).then((val) {
          Get.back(result: [modifiedTeamMemberRecruit]);
          Get.back();
        });
      } else {
        DialogBuilder(context).showLoadingIndicator("");

        var res = await ApiProvider().post(
            '/Matching/Insert/TeamMemberRecruit',
            jsonEncode({
              'teamID': widget.team.id,
              'title': controller.title.value + '||' + widget.team.name,
              'recruitPeriodStart': controller.recruitPeriodStart.value.replaceAll('ÎÖÑ ', '').replaceAll('Ïõî ', '').replaceAll('Ïùº', '') + '000000',
              'recruitPeriodEnd': controller.recruitPeriodEnd.value == 'ÏÉÅÏãúÎ™®Ïßë' ? 'ÏÉÅÏãúÎ™®Ïßë' : controller.recruitPeriodEnd.value.replaceAll('ÎÖÑ ', '').replaceAll('Ïõî ', '').replaceAll('Ïùº', '') + '235959',
              'recruitInfo': controlSpace(controller.recruitInfo.value),
              'category': category,
              'servicePart': widget.team.part,
              'location': widget.team.location,
              'subLocation': widget.team.subLocation,
              'recruitField': controller.recruitJob,
              'recruitSubField': controller.recruitPart.value,
              'roleContents': controlSpace(controller.roleContents.value),
              'education': education,
              'career': career,
              'detailVolunteerQualification': controller.detailEligibility.value,
              'preferenceInfo': preferenceInfo,
              'detailPreferenceInfoContents': controlSpace(controller.detailPreferenceInfoContents.value),
              'workFormFirst': controller.workFormList[0],
              'workFormSecond': controller.workFormList.length > 1 ? controller.workFormList[1] : '',
              'workDayOfWeek': workDayOfWeek,
              'workTime': workTime,
              'welfare': welfare,
              'detailWorkCondition': controlSpace(controller.detailWorkCondition.value),
            }));

        TeamMemberRecruit newTeamMemberRecruit = TeamMemberRecruit.fromJson(res);
        
        DialogBuilder(context).hideOpenDialog();

        showSheepsDialog(
          context: context,
          title: 'Î™®ÏßëÍ∏ÄÏù¥\nÍ≤åÏãúÎêòÏóàÏñ¥Ïöî üòÑ',
          description: 'Ï†úÏïàÏù¥ Ïò§Î©¥, Î©¥Ï†ë Ï±ÑÌåÖÎ∞©Ïù¥ ÏÉùÍ≤®Ïöî!\nÏ∂©Î∂ÑÌûà ÎåÄÌôî ÌõÑ Í≤∞Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.',
          okText: 'Í≤åÏãúÍ∏Ä ÌôïÏù∏ÌïòÍ∏∞',
          isCancelButton: false,
          isBarrierDismissible: false,
        ).then((val) {
          globalTeamMemberRecruitList.insert(0, newTeamMemberRecruit);
          if(widget.isMyPageRecruit) myPageRecruitList.insert(0, newTeamMemberRecruit); // ÎßàÏù¥ÌéòÏù¥ÏßÄÏóêÏÑú ÏôîÎã§Î©¥ Î¶¨Ïä§Ìä∏Ïóê Ï∂îÍ∞Ä
          Get.back(); // Dialog
          Get.back(); // TeamMemberRecruitEditPage
          Get.back(); // ExpandedFab

          Get.to(() => RecruitDetailPage(isRecruit: true, data: newTeamMemberRecruit));
        });
      }
    });
  }
}
